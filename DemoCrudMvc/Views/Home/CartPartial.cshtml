@model List<DAL.ViewModals.CartItems>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

<style>
	.cart-item {
		display: flex;
		align-items: center;
		padding: 10px;
		border-bottom: 1px solid #ddd;
	}

		.cart-item img {
			width: 100px;
			height: auto;
			margin-right: 20px;
		}

	.clamp-text {
		display: -webkit-box;
		-webkit-line-clamp: 2; /* Limit to 4 lines */
		-webkit-box-orient: vertical;
		overflow: hidden;
		text-overflow: ellipsis;
		color: #657380; /* Text color */
	}
</style>

<div class="container mt-5 ">

	@if (Model.Count > 0)
	{

		<form asp-action="CheckOut" method="post" class="row gap-3">

			<div id="cart-items" class="col-md-6 row gx-3 gap-3">

				@foreach (var item in Model)
				{
					<div class="col-md-12 gap-3 bg-white">
						<div class="cart-item d-flex justify-content-between align-items-center" data-product-id="@item.ProductId">
							<div class="d-flex">
								<div>
									<img src="~/uploads/@item.CartFileName" alt="@item.CartFileName" />
								</div>
								<div class="d-flex flex-column justify-content-between">
									<input type="text" type="hidden" asp-for="@item.CartItemName" name="Cartname">
									<input type="hidden" asp-for="@item.ProductId" name="productID">
									<input class="d-none" asp-for="@item.CartItemPrice" name="CartPrice" id="cartPrice-@item.ProductId" />
									<h4 class="clamp-text fs-5">@item.CartItemName</h4>
									<div class="quantity-control d-flex align-items-center">
										<span class="text-muted fw-bolder">Qty:</span>
										<div id="quantity-controls-@item.ProductId" class="quantity-controls">
											<button class="btn btn-outline-secondary" type="button" onclick="decrementQuantity('@item.ProductId', '@item.CartMaxQuantity')">-</button>
											<span id="quantity-@item.ProductId">@item.CartItemQuantity</span>
											<input name="quantity" id="quantity1-@item.ProductId" type="hidden" asp-for="@item.CartItemQuantity"/>
											<button type="button" class="btn btn-outline-secondary" onclick="incrementQuantity('@item.ProductId', '@item.CartMaxQuantity')">+</button>
										</div>
									</div>
								</div>
							</div>
							<div class="d-flex flex-column">
								<div class="d-flex justify-content-end" onclick="RemoveFromCard('@item.ProductId')">
									<i class="fa fa-trash text-danger fs-3" aria-hidden="true"></i><span> </span>
								</div>
								<div>
									<span class="d-flex justify-content-end">Price:</span>
									<span id="price-@item.ProductId" class="fw-bolder">$@(@item.CartItemPrice * @item.CartItemQuantity)</span>
								</div>
							</div>
						</div>
					</div>

				}
				
			</div>
			<div class="col-md-4">
				<div class="bg-white  p-3  border-bottom">

					<div class=" d-flex justify-content-between">
						<span class="fs-5"> Subtotal: </span>
						<span id="total-price" class="text-muted total-price"></span>
					</div>
					<div class=" d-flex justify-content-between">
						<span class="fs-5"> Delivery: </span>
						<span class="text-muted">0</span>
					</div>
				</div>
				<div class="bg-white p-3 border-bottom">
					<div class="d-flex justify-content-between">
					<span class="fw-bolder">Total</span>
					<span class="text-muted total-price fw-bolder"></span>
					</div>
				</div>
				<div class="bg-white  d-flex justify-content-end p-3">

					<button class="btn btn-success fw-bolder mb-3" type="submit">Proceed to Checkout</button>

				</div>
			</div>
			<div class="row">
				<div class="bg-white col-md-10 border rounded p-3">
					<b><p>Delivery Information:</p></b>
					<p>Standard Delivery is 2-4 working days.</p>
					<b><p>Need it faster?</p></b>
					<p>You can upgrade to <b>Next Day Delivery</b> during Checkout for <b>Next Working Day delivery (Order before 10pm).</b> Next Day Delivery is not available outside of Mainland UK.<b> Delivery is Monday to Friday, excluding public holidays.</b></p>
					<p>Any orders placed after 10pm Friday and over the weekend will not be dispatched until Monday, excluding Public Holidays.</p>
					<p>FREE returns to any Smyths Toys Superstore near you.</p>
					<p>Please note, some large items (such as bikes, doll houses, playhouses) will be delivered in their original packing which may display images or details of the contents.</p>
				</div>
			</div>

		</form>
	}

	else
	{

		<div style="text-align: center; padding: 20px;">
			<img src="~/download.png" alt="Empty Cart" style="width: 200px; height: 200px;">
			<h2 style="margin-top: 20px; font-weight: bold; color: #333;">Your Shopping Cart is Empty</h2>
			<p style="font-size: 16px; color: #666; margin-top: 10px;">Looks like you haven't added anything to your cart yet.</p>
			<p style="font-size: 16px; color: #666;">Start shopping now to find the perfect items for you!</p>
			<a class="btn btn-primary" asp-action="Index" asp-controller="Home">Browse Products</a>
		</div>

	}
</div>

<script>
	// function decrementQuantity(productId, currentQuantity) {
	// 	var newQuantity = parseInt(currentQuantity) - 1;
	// 	if (newQuantity >= 0) {
	// 		document.getElementById('quantity-' + productId).textContent = newQuantity;
	// 		// You can perform additional actions here, such as updating the cart or sending the new quantity to the server
	// 	}
	// }

	// function incrementQuantity(productId, maxQuantity) {
	// 	var currentQuantity = parseInt(document.getElementById('quantity-' + productId).textContent);
	// 	var newQuantity = currentQuantity + 1;
	// 	if (newQuantity <= parseInt(maxQuantity)) {
	// 		document.getElementById('quantity-' + productId).textContent = newQuantity;
	// 		// You can perform additional actions here, such as updating the cart or sending the new quantity to the server
	// 	}
	// }

	function RemoveFromCard(productId) {
		console.log(productId);

		// Retrieve cart data from local storage
		let cart = JSON.parse(localStorage.getItem('cart')) || {};

		// Check if productId exists in the cart dictionary
		if (productId in cart) {
			// Remove the entry corresponding to the productId key
			delete cart[productId];

			// Update cart data in local storage
			localStorage.setItem('cart', JSON.stringify(cart));
		} else {
			console.error('Product ID not found in cart:', productId);
		}

		// Reload the page
		location.reload();
	}
	// Function to update local storage and quantity on increment
	// Function to update local storage and quantity on increment
	function incrementQuantity(productId, maxQuantity) {
		const quantityElement = document.getElementById(`quantity-${productId}`);
		let quantity = parseInt(quantityElement.textContent);

		if (quantity < maxQuantity) {
			quantity++;
			quantityElement.textContent = quantity;
			updateLocalStorage(productId, quantity);
			updatePrice(productId, quantity);
			updateQuantityInput(productId, quantity); // Update quantity input field

			updateSubtotal();
		}
	}

	// Function to update local storage and quantity on decrement
	function decrementQuantity(productId, maxQuantity) {
		const quantityElement = document.getElementById(`quantity-${productId}`);
		let quantity = parseInt(quantityElement.textContent);

		if (quantity > 1) {
			quantity--;
			quantityElement.textContent = quantity;
			updateLocalStorage(productId, quantity);
			updatePrice(productId, quantity);
			updateQuantityInput(productId, quantity); // Update quantity input field

			updateSubtotal();
		} else if (quantity === 1) {
			const quantityControls = document.getElementById(`quantity-controls-${productId}`);
			quantityControls.classList.add('d-none');
			updateLocalStorage(productId, 0); // Remove the item from local storage
			updatePrice(productId, 0);
			updateSubtotal();
			updateQuantityInput(productId, 0); // Update quantity input field

			location.reload()
		}
	}
	function updateQuantityInput(productId, quantity) {
		const quantityInput = document.getElementById(`quantity1-${productId}`);
		quantityInput.value = quantity;
	}
	// Function to update the subtotal
	function updateSubtotal() {
		const cartItems = document.querySelectorAll('.cart-item');
		let subtotal = 0;
		cartItems.forEach(cartItem => {
			const productId = cartItem.getAttribute('data-product-id');
			const quantity = parseInt(document.getElementById(`quantity-${productId}`).textContent);
			const unitPrice = parseFloat(document.getElementById(`cartPrice-${productId}`).value); // Get the unit price from a hidden input field
			subtotal += quantity * unitPrice;
		});

		let elements = document.getElementsByClassName('total-price');
		for (let i = 0; i < elements.length; i++) {
			elements[i].textContent = '$' + subtotal.toFixed(2);
		}
	}


	// Function to update the price based on quantity
	function updatePrice(productId, quantity) {
		const priceElement = document.getElementById(`price-${productId}`);
		const cartPriceElement = document.getElementById(`cartPrice-${productId}`);
		const unitPrice = parseFloat(cartPriceElement.value); // Get the unit price from a hidden input field
		const totalPrice = unitPrice * quantity;
		priceElement.textContent = '$' + totalPrice.toFixed(2); // Display the total price

	}

	function updateLocalStorage(productId, quantity) {
		let cart = JSON.parse(localStorage.getItem('cart')) || {};
		if (quantity > 0) {
			cart[productId] = quantity;
		} else {
			delete cart[productId];
		}
		localStorage.setItem('cart', JSON.stringify(cart));
	}
	function updateQuantity(productId, quantity, maxQuantity, price) {
		quantity = parseInt(quantity);
		maxQuantity = parseInt(maxQuantity);

		if (quantity > maxQuantity) {
			document.getElementById('quantity-' + productId).value = maxQuantity;
			quantity = maxQuantity;
		}

		console.log('Product ID:', productId);
		console.log('Selected Quantity:', quantity);
		console.log('Max Quantity:', maxQuantity);
		console.log('Price:', price);


		const totalPrice = quantity * price;
		document.getElementById('price-' + productId).innerText = totalPrice.toFixed(2);

		var total = 0;

		var priceElements = document.querySelectorAll('[id^="price-"]');

		priceElements.forEach(function (element) {
			var priceWithoutDollarSign = element.innerText.replace('$', '');
			var price = parseFloat(priceWithoutDollarSign);
			console.log(element.innerText)

			console.log(typeof (price)); // Output: "12311"

			total += price;
		});
		console.log(total)
		var totalFormatted = total.toFixed(2);

		let elements = document.getElementsByClassName('total-price');
		for (let i = 0; i < elements.length; i++) {
			elements[i].innerText = totalFormatted;
		}
	}
	var total = 0;

	var priceElements = document.querySelectorAll('[id^="price-"]');

	priceElements.forEach(function (element) {
		var priceWithoutDollarSign = element.innerText.replace('$', '');
		var price = parseFloat(priceWithoutDollarSign);
		console.log(element.innerText)

		console.log(typeof (price)); // Output: "12311"

		total += price;
	});
	console.log(total)
	var totalFormatted = total.toFixed(2);

	let elements = document.getElementsByClassName('total-price');
	for (let i = 0; i < elements.length; i++) {
		elements[i].innerText = '$'+ totalFormatted;
	}
</script>
